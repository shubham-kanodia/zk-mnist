pragma circom 2.0.1;

include "../node_modules/circomlib/circuits/comparators.circom";
include "../node_modules/circomlib/circuits/switcher.circom";

template ArgMax (n) {
    signal input in[n];
    signal output out;
    component gts[n];        // store comparators
    component switchers[n+1];  // switcher for comparing maxs
    component aswitchers[n+1]; // switcher for arg max

    signal maxs[n+1];
    signal amaxs[n+1];

    maxs[0] <== in[0];
    amaxs[0] <== 0;
    for(var i = 0; i < n; i++) {
        gts[i] = GreaterThan(30);
        switchers[i+1] = Switcher();
        aswitchers[i+1] = Switcher();

        gts[i].in[1] <== maxs[i];
        gts[i].in[0] <== in[i];

        switchers[i+1].sel <== gts[i].out;
        switchers[i+1].L <== maxs[i];
        switchers[i+1].R <== in[i];

        aswitchers[i+1].sel <== gts[i].out;
        aswitchers[i+1].L <== amaxs[i];
        aswitchers[i+1].R <== i;
        amaxs[i+1] <== aswitchers[i+1].outL;
        maxs[i+1] <== switchers[i+1].outL;
    }

    out <== amaxs[n];
}

template MatmulVec(m, n) {
    signal input A[m][n];
    signal input x[n];
    signal output out[m];
    
    signal s[m][n + 1];
    for (var i = 0; i < m; i++) {
        s[i][0] <== 0;
        for (var j = 1; j <= n; j++) {
            s[i][j] <== s[i][j-1] + A[i][j-1] * x[j-1];
        }
        out[i] <== s[i][n];
    }
}

template DigitReader (b, n) {
    signal input embedding[n];
    signal output digits[b];

    signal output out;

    var A[b][n] = [
[12,-76,-130,109,105,81,-190,-35,-121,152,-200,-212,126,101,-11,-42,120,-269,44,-95,-239,-122,83,-142,188,-313,-70,152,-44,25,100,-97,-28,-92,-63,-46,-69,-94,47,-29,25,49,76,-74,-124,105,54,-47,-26,33,-16,4,130,-151,-98,151,49,71,50,140,117,-123,0,-114,2,-106,51,46,68,-61,90,-1,33,91,41,134,-51,-106,-91,-17,98,-98,65,-184],
[92,-143,-67,-10,-73,119,-83,7,167,113,-37,-12,152,-28,-34,20,139,78,-66,42,53,-163,-74,-196,104,18,29,-56,-1,-193,-74,121,-47,-9,18,146,-137,-202,-225,67,50,81,-181,-64,100,29,24,137,4,53,11,-87,187,102,-193,-1,43,-192,12,72,-27,173,80,140,-174,22,-52,-162,-31,67,-37,134,-56,-129,-168,136,-94,51,82,74,-34,139,82,-13],
[-37,-15,-183,0,-160,-71,66,-35,40,-149,68,44,-131,1,31,-65,42,1,-82,158,-160,116,53,41,125,-170,-106,139,-83,14,86,-13,-128,41,-73,-194,127,-143,138,-88,-74,-33,-35,-33,135,-38,128,-111,117,144,-167,-43,147,60,-119,156,-172,-66,161,-49,78,0,22,-214,14,152,70,-154,-10,-38,-133,88,-8,146,-162,78,40,-165,56,-53,126,70,-67,-98],
[-72,-122,-95,31,-11,104,-163,-101,43,34,67,-71,-186,24,54,-225,122,-103,6,112,32,-141,43,-82,-179,-41,-60,-153,-39,51,-33,-157,125,129,-159,-183,37,153,-29,-22,-45,-161,-73,148,-74,28,-43,159,-112,-24,138,109,-140,104,125,12,-94,-9,182,-202,-18,-30,18,-69,-19,-45,-32,17,-37,-66,142,-324,-99,-116,-116,63,-100,-42,-4,108,-78,116,13,94],
[-5,106,131,-121,129,-187,-29,-39,143,-150,53,163,121,-68,32,-144,35,20,41,-122,76,-50,96,73,-157,-92,0,1,-32,-259,129,161,-72,-192,8,155,-43,-15,26,-4,-59,-187,114,-121,-42,-15,101,-96,-76,-168,-113,-31,105,-55,-51,-172,-11,37,-181,-12,44,35,-240,151,-291,-76,-106,-12,1,-30,30,-93,106,-18,-126,-187,-59,134,-8,-217,100,-167,-113,32],
[17,-109,-18,162,106,-162,26,67,-10,-15,-40,-79,-129,-28,-139,-101,111,-120,-88,76,132,8,-268,34,-41,44,-56,-1,-60,108,97,-206,156,102,-156,30,43,113,-43,-51,-12,115,137,110,16,64,-51,69,-86,58,15,-104,-102,-187,-46,-153,186,-28,-56,46,73,-185,167,57,60,0,56,27,32,-52,-101,33,-53,-153,173,-30,-21,-35,27,-132,-78,-4,13,56],
[82,-239,-175,-26,48,-181,-95,8,-126,81,-141,-158,178,-42,-103,147,59,69,146,-165,-211,142,-127,-103,-105,-154,-58,132,-79,-92,-95,-117,27,119,97,130,-145,-209,167,21,-10,81,1,85,69,5,123,-37,-290,-39,116,46,-76,-201,-21,1,202,111,-75,-50,-35,-154,15,-54,-103,89,24,-196,-72,-5,-102,72,99,-150,-30,-152,-7,-166,-102,-103,134,-137,-12,-62],
[-48,123,154,-156,54,-107,189,-22,-123,141,92,15,25,-48,-73,24,-135,107,-272,159,-12,93,82,-85,-8,-163,25,-190,-88,99,65,49,-268,-217,-186,-49,96,43,-26,-81,-33,40,106,-124,-157,84,-198,44,125,102,-71,27,94,68,-171,79,264,-184,121,-15,15,-84,47,-107,37,-152,-45,129,-21,57,77,-163,-42,-85,-10,137,-8,-13,-5,114,-280,-68,31,96],
[-9,150,103,90,70,-55,-155,41,-163,-156,-145,-119,-109,35,105,139,-249,-161,71,-4,93,110,10,110,111,20,-73,-204,15,-17,-158,-57,104,116,-14,-91,154,104,116,-92,58,106,-177,64,15,7,-75,117,18,-220,82,-166,21,34,-18,66,-215,41,56,-118,118,-12,103,-2,-29,85,-91,138,-59,35,44,-7,43,69,-37,-174,50,49,45,-107,-113,72,37,-231],
[55,-22,147,126,0,-102,9,-58,21,84,181,-52,-132,36,113,102,48,53,-13,-219,-31,-277,46,25,-157,-41,-53,169,50,187,-83,-58,103,-85,-167,102,-149,183,-85,-50,-98,-10,3,-4,12,-34,-171,-124,88,64,-102,-43,-159,-88,-54,-193,-273,163,-70,22,-235,90,-76,87,51,-31,40,93,117,-35,-24,-14,12,96,129,22,-85,170,25,21,-51,62,-22,92]];
    
    var B[b] =  [
      -44638,
      -28147,
      100997,
      78663,
      -88454,
      6349,
      -97006,
      -126437,
      52297,
      -88181];

    component matmul = MatmulVec(b, n);
    matmul.A <== A;
    matmul.x <== embedding;

    signal inter[b] <== matmul.out;
    component amax = ArgMax(b);
    
    for(var i=0; i<b; i++) {
        amax.in[i] <== inter[i] + 1000000000;
    }

    out <== amax.out;
}

component main = DigitReader(10, 84);

/* INPUT = {
         "image": [34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34, 7, 3, 56, 34, 2, 11, 34,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,
    0,0,0,0 ]
} */
